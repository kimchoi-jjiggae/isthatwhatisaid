[{"/Users/michellechoi/Development/code/phase-4/projects/isthatwhatisaid/src/index.js":"1","/Users/michellechoi/Development/code/phase-4/projects/isthatwhatisaid/src/App.js":"2","/Users/michellechoi/Development/code/phase-4/projects/isthatwhatisaid/src/reportWebVitals.js":"3","/Users/michellechoi/Development/code/phase-4/projects/isthatwhatisaid/src/SummarizeAudio.js":"4"},{"size":579,"mtime":1680721392777,"results":"5","hashOfConfig":"6"},{"size":503,"mtime":1680727171556,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1680721392778,"results":"8","hashOfConfig":"6"},{"size":7406,"mtime":1680726833760,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1nl19g",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"/Users/michellechoi/Development/code/phase-4/projects/isthatwhatisaid/src/index.js",[],[],"/Users/michellechoi/Development/code/phase-4/projects/isthatwhatisaid/src/App.js",[],[],"/Users/michellechoi/Development/code/phase-4/projects/isthatwhatisaid/src/reportWebVitals.js",[],[],"/Users/michellechoi/Development/code/phase-4/projects/isthatwhatisaid/src/SummarizeAudio.js",["23","24","25","26","27","28","29","30","31","32","33","34","35","36"],[],"import React from \"react\";\nimport { useState, useEffect } from 'react';\nimport './App.css';\n\n//components\n// import Question from \"../deprecated/Question\";\n\nimport axios from \"axios\";\n\n// import Loading from \"./Loading\";\n// import OutputRecForm from \"../deprecated/OutputRecForm\";\n\n\n//images\n\nimport paste from './images/paste.svg'\n// import select from './images/select.svg'\n// import write from './images/write.svg'\n\n\n\n\n\n\nfunction RecForm() {\n\n\n\n    const [prompt, setPrompt] = useState(\"\");\n\n    const [response, setResponse] = useState(\"\");\n    const [name, setName] = useState()\n    const [relationship, setRelationship] = useState()\n    const [company, setCompany] = useState()\n\n    const [description, setDescription] = useState()\n    const [accomplishments, setAccomplishments] = useState()\n    const [skills, setSkills] = useState()\n    const [style, setStyle] = useState()\n    const [words, setWords] = useState(300)\n\n    const [isLoading, setIsLoading] = useState(false)\n    const [hasCalledAPI, setHasCalledAPI] = useState(false)\n    const [url, setURL] = useState(\"\")\n    const [descriptionPlaceholder, setDescriptionPlaceholder] = useState()\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n\n        setPrompt(prevPrompt => {\n            const updatedPrompt = `write me a letter of recommendation with a ${style} style in ${words} words for a candidate named ${name} with these accomplishments: ${accomplishments} and these skills: ${skills} who is applying for with this job description ${description} who I have the following relationship with: ${relationship}`;\n            console.log(updatedPrompt); // this will log the updated prompt value\n            return updatedPrompt;\n        });\n\n        setIsLoading(true)\n        setHasCalledAPI(false)\n\n        // console.log(document.getElementById(\"Loading\"))\n\n        // targetRef.current.scrollIntoView({ behavior: 'auto' })\n\n        setTimeout(()=> \n        {window.scrollBy({\n            top: 800,\n            behavior: \"smooth\"\n        })\n    }, \n    1500)\n}\n\n\n\n    useEffect(() => {\n        if (prompt !== \"\") {\n            axios\n                .post(\"http://localhost:8080/chat\", { prompt })\n                .then((res) => {\n                    setHasCalledAPI(true)\n                    setIsLoading(false)\n                    console.log(res)\n                    setResponse(prevRes => {\n                        let newRes = res.data;\n                        return newRes;\n                    });\n                })\n                .catch((err) => {\n                    console.error(err);\n                });\n        }\n\n    }, [prompt])\n\n\n\n\n\n    return (\n        <div>\n            <div className=\"formTitle\">\n                <h1 className=\"headTitle\">Is that what I said?</h1>\n                <h2 className=\"headSub\"> Let's transcribe and summarize!</h2>\n                {/* <p className=\"headP\">Please answer as many questions as possible</p> */}\n            </div>\n\n            <br />\n            <br />\n\n            <form className=\"inputForm\" onSubmit={handleSubmit}>\n\n\n                <div className=\"questionBox\">\n\n                    <img src={paste} className=\"numberSize\" />\n                    <div className=\"questionBoxText\">\n                        <label className=\"label\">Upload the audio file here. TO DO: LIST SUPPORTED FILE TYPES!</label>\n                        <div className=\"submitLink\">\n                            <input name=\"description\" id=\"jobDescription\" className=\"input\" placeholder=\"Your audio file transcription will appear here. \" ></input>\n                            <button onClick={(e)=> \n                                {\n                                    e.preventDefault()\n                                    setURL(document.getElementById(\"jobDescription\").value)\n                                    // console.log(document.getElementById(\"jobDescription\").value)\n                                }\n                                } className=\"button-29\">Upload</button>\n                        </div>\n\n                    </div>\n\n                </div>\n\n                <br />\n\n\n\n                {/* options */}\n\n                {/* <h1 style={{ textAlign: \"center\", color: \"#F67062\" }}>Options</h1>\n\n                <div className=\"writingStylesDiv\" >\n                    <img src={select} className=\"numberSize\" />\n                    <label className=\"subLabel\">Writing Styles</label>\n\n\n                    <br />\n\n                    <div style={{ display: \"flex\" }}>\n                        <div className=\"styleContainer\" onChange={(e) => setStyle(e.target.id)}>\n                            <input type=\"radio\" id=\"formal\" name=\"writingStyle\" ></input>\n                            <label htmlFor=\"formal\">\n                                <h2>Formal</h2>\n                                <p>Professional tone.</p>\n                                <p>Often used for academic or job-related recommendations.</p>\n                            </label>\n                        </div>\n\n                        <br />\n\n                        <div className=\"styleContainer\" onChange={(e) => setStyle(e.target.id)}>\n                            <input type=\"radio\" id=\"narrative\" className=\"radioButton\" name=\"writingStyle\"></input>\n                            <label htmlFor=\"narrative\" >\n                                <h2>Narrative</h2>\n                                <p>Storytelling format, highlighting the person’s achievements and qualities through anecdotes and examples.</p>\n                                <p>Often used for personal recommendations.</p>\n                            </label>\n                        </div>\n                    </div>\n\n                    <br />\n\n                    <div style={{ display: \"flex\" }}>\n                        <div className=\"styleContainer\" onChange={(e) => setStyle(e.target.id)}>\n                            <input type=\"radio\" id=\"bulletPoint\" className=\"radioButton\" name=\"writingStyle\"></input>\n                            <label htmlFor=\"bulletPoint\" >\n                                <h2>Bullet Point</h2>\n                                <p>Structured with short, concise statements that highlight the person’s skills and achievements.</p>\n                                <p>Often used when the recipient requires a quick summary of the person’s qualifications.</p>\n                            </label>\n                        </div>\n\n                        <br />\n\n                        <div className=\"styleContainer\" onChange={(e) => setStyle(e.target.id)}>\n                            <input type=\"radio\" id=\"comparative\" className=\"radioButton\" name=\"writingStyle\"></input>\n                            <label htmlFor=\"comparative\" >\n                                <h2>Comparative</h2>\n                                <p>Compares the person to others in their field, highlighting their strengths and qualifications. </p>\n                                <p>Often used in academic or job-related recommendations.</p>\n                            </label>\n                        </div>\n\n                    </div> */}\n\n\n            </form >\n\n            <br />\n            <br />\n\n            <div id=\"Loading\">\n                {isLoading ? <h1>\"Worked!\"</h1> : null}\n            </div>\n\n\n            {hasCalledAPI ? <h1>\"DIDNT WORK!\"</h1> : null}\n\n\n        </div >\n    )\n}\n\nexport default RecForm",{"ruleId":"37","severity":1,"message":"38","line":31,"column":12,"nodeType":"39","messageId":"40","endLine":31,"endColumn":20},{"ruleId":"37","severity":1,"message":"41","line":32,"column":18,"nodeType":"39","messageId":"40","endLine":32,"endColumn":25},{"ruleId":"37","severity":1,"message":"42","line":33,"column":26,"nodeType":"39","messageId":"40","endLine":33,"endColumn":41},{"ruleId":"37","severity":1,"message":"43","line":34,"column":12,"nodeType":"39","messageId":"40","endLine":34,"endColumn":19},{"ruleId":"37","severity":1,"message":"44","line":34,"column":21,"nodeType":"39","messageId":"40","endLine":34,"endColumn":31},{"ruleId":"37","severity":1,"message":"45","line":36,"column":25,"nodeType":"39","messageId":"40","endLine":36,"endColumn":39},{"ruleId":"37","severity":1,"message":"46","line":37,"column":29,"nodeType":"39","messageId":"40","endLine":37,"endColumn":47},{"ruleId":"37","severity":1,"message":"47","line":38,"column":20,"nodeType":"39","messageId":"40","endLine":38,"endColumn":29},{"ruleId":"37","severity":1,"message":"48","line":39,"column":19,"nodeType":"39","messageId":"40","endLine":39,"endColumn":27},{"ruleId":"37","severity":1,"message":"49","line":40,"column":19,"nodeType":"39","messageId":"40","endLine":40,"endColumn":27},{"ruleId":"37","severity":1,"message":"50","line":44,"column":12,"nodeType":"39","messageId":"40","endLine":44,"endColumn":15},{"ruleId":"37","severity":1,"message":"51","line":45,"column":12,"nodeType":"39","messageId":"40","endLine":45,"endColumn":34},{"ruleId":"37","severity":1,"message":"52","line":45,"column":36,"nodeType":"39","messageId":"40","endLine":45,"endColumn":61},{"ruleId":"53","severity":1,"message":"54","line":116,"column":21,"nodeType":"55","endLine":116,"endColumn":63},"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","'setName' is assigned a value but never used.","'setRelationship' is assigned a value but never used.","'company' is assigned a value but never used.","'setCompany' is assigned a value but never used.","'setDescription' is assigned a value but never used.","'setAccomplishments' is assigned a value but never used.","'setSkills' is assigned a value but never used.","'setStyle' is assigned a value but never used.","'setWords' is assigned a value but never used.","'url' is assigned a value but never used.","'descriptionPlaceholder' is assigned a value but never used.","'setDescriptionPlaceholder' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]